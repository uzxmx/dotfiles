# vi: ft=ps1
# on-file-change: ~/.dotfiles/scripts/misc/sync_powershell_profile.sh __FILE__

# Ref: https://github.com/PowerShell/PSReadLine
function InitPSReadLine {
  Import-Module PSReadLine
  Set-PSReadLineOption -EditMode Vi
  Set-PSReadLineOption -HistorySearchCursorMovesToEnd
  Set-PSReadlineKeyHandler -Chord Ctrl+a -Function BeginningOfLine
  Set-PSReadlineKeyHandler -Chord Ctrl+e -Function MoveToEndOfLine
  Set-PSReadlineKeyHandler -Chord Ctrl+w -Function BackwardKillWord
  Set-PSReadlineKeyHandler -Chord Ctrl-p -Function HistorySearchBackward
  Set-PSReadlineKeyHandler -Chord Ctrl-n -Function HistorySearchForward

  function OnViModeChange {
    if ($args[0] -eq 'Command') {
      # Set the cursor to a blinking block.
      Write-Host -NoNewLine "`e[1 q"
    } else {
      # Set the cursor to a blinking line.
      Write-Host -NoNewLine "`e[5 q"
    }
  }
  Set-PSReadLineOption -ViModeIndicator Script -ViModeChangeHandler $Function:OnViModeChange
}

if ($host.Name -eq 'ConsoleHost')
{
  InitPSReadLine
}

function version {
  $hostversion="$($Host.Version.Major)`.$($Host.Version.Minor)"
  $osname = (Get-ComputerInfo -Property OsName).OsName
  $osversion = (Get-ComputerInfo -Property OsVersion).OsVersion
  return "PowerShell $hostversion $osname $osversion"
}

# Directory Listing: Use `ls.exe` if available
if (Get-Command ls.exe -ErrorAction SilentlyContinue | Test-Path) {
  rm alias:ls -ErrorAction SilentlyContinue
  # Set `ls` to call `ls.exe` and always use --color
  ${function:ls} = { ls.exe --color @args }
  # List all files in long format
  ${function:l} = { ls -lF @args }
  # List all files in long format, including hidden files
  ${function:la} = { ls -laF @args }
  # List only directories
  ${function:lsd} = { Get-ChildItem -Directory -Force @args }
} else {
  # List all files, including hidden files
  ${function:la} = { ls -Force @args }
  # List only directories
  ${function:lsd} = { Get-ChildItem -Directory -Force @args }
}

function Prompt {
  if ((Get-History).count -ge 1) {
    $executionTime = ((Get-History)[-1].EndExecutionTime - (Get-History)[-1].StartExecutionTime).Totalseconds
    $time = [math]::Round($executionTime, 3)
    return "[$time s] $(Get-Location)`r`nPS> "
  } else {
    return "$(Get-Location)`r`nPS> "
  }
}

function reload {
  . $PROFILE
}

function ip {
  Get-NetIPAddress -AddressFamily IPV4 | Sort-Object -Property InterfaceIndex | Format-Table
}
