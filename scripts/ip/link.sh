usage_link() {
  cat <<-EOF
Usage: ip link

Manage network devices.

Subcommands:
  l, list   - list network devices
  s, show   - show a network device
  a, add    - add a network device
  d, delete - delete a network device
EOF
  exit 1
}

cmd_link() {
  local cmd="$1"
  shift || true
  if [ -z "$cmd" ]; then
    cmd="list"
  fi

  case "$cmd" in
    l | list | s | show | a | add | d | delete)
      case "$cmd" in
        l)
          cmd="list"
          ;;
        s)
          cmd="show"
          ;;
        a)
          cmd="add"
          ;;
        d)
          cmd="delete"
          ;;
      esac
      case "$1" in
        -h)
          type "usage_link_$cmd" &>/dev/null && "usage_link_$cmd"
          ;;
      esac
      "cmd_link_$cmd" "$@"
      ;;
    *)
      usage_link
      ;;
  esac
}
alias_cmd l link

usage_link_list() {
  cat <<-EOF
Usage: ip link list

List network devices.

Options:
  -t <device_type> filter by device type
  -a <address> filter by IP address
  --output-format <format> supported formats include 'default', 'name'
EOF
  exit 1
}

cmd_link_list() {
  if [ "$#" -eq 0 ]; then
    ip link
  else
    local output_format
    local -a opts
    while [ "$#" -gt 0 ]; do
      case "$1" in
        -t)
          shift
          opts+=(-t "$1")
          ;;
        -a)
          shift
          opts+=(-a "$1")
          ;;
        --output-format)
          shift
          output_format="$1"
          ;;
        *)
          usage_link
      esac
      shift
    done

    source "$DOTFILES_DIR/scripts/lib/go.sh"
    local names
    names="$(go_run_compiled "$ip_dir/netlink.go" list "${opts[@]}")"

    if [ "$output_format" = name ]; then
      echo "$names"
    else
      local name
      while read name; do
        [ -n "$name" ] && ip link show dev "$name"
      done < <(echo "$names")
    fi
  fi
}

select_link() {
  ip link | grep -E "^[0-9]+:" | awk -F: '{print $2}' | sed "s/ //" | fzf --prompt "Select a device> "
}

usage_link_show() {
  cat <<-EOF
Usage: ip link show [device_name]

Show a network device.
EOF
  exit 1
}

cmd_link_show() {
  local name="$1"

  if [ -z "$name" ]; then
    name="$(select_link)"
  fi

  sudo ip link show dev "$name"

  source "$DOTFILES_DIR/scripts/lib/go.sh"
  local info
  info="$(go_run_compiled "$ip_dir/netlink.go" show "$name")"

  echo "$info"
  local type="$(echo "$info" | grep "^Type: " | awk '{print $2}')"
  if [ "$type" = "bridge" ]; then
    echo "---- Bridge members ----"
    sudo ip link show master "$name"
  fi
}

usage_link_add() {
  cat <<-EOF
Usage: ip link add

Add a network device.

For more information, please visit
https://help.aliyun.com/document_detail/91176.html?spm=a2c4g.11186623.6.845.2da74b879LKg6J

Options:
  -n <device_name> device name, if omitted, a name will be generated by following pattern '<device_type>0'.
  -t <device_type> device type, use 'ip - link help' to get supported types
  -a <address> address to assign to the new device

Examples:
  $> ip link add -t dummy -a 10.0.0.1/24
EOF
  exit 1
}

cmd_link_add() {
  local name device_type address
  while [ "$#" -gt 0 ]; do
    case "$1" in
      -n)
        shift
        name="$1"
        ;;
      -t)
        shift
        device_type="$1"
        ;;
      -a)
        shift
        address="$1"
        ;;
      *)
        usage_link_add
        ;;
    esac
    shift
  done

  [ -z "$device_type" ] && echo "A device type is required." && exit 1

  if [ -z "$name" ]; then
    name="${device_type}0"
  fi

  if [ -z "$address" -a "$device_type" = "dummy" ]; then
    address="10.0.0.1/24"
  fi

  sudo ip link add name "$name" type "$device_type"
  sudo ip link set dev "$name" up

  if [ -n "$address" ]; then
    sudo ip addr add "$address" dev "$name"
  fi
}

usage_link_delete() {
  cat <<-EOF
Usage: ip link delete [device_name]

Delete a network device.
EOF
  exit 1
}

cmd_link_delete() {
  local name="$1"

  if [ -z "$name" ]; then
    name="$(select_link)"
  fi

  source "$DOTFILES_DIR/scripts/lib/prompt.sh"
  [ "$(yesno "Confirm to delete the network device $name? (y/N)" "no")" = "no" ] && echo Cancelled && exit 1

  sudo ip link del dev "$name"
  echo Deleted.
}
