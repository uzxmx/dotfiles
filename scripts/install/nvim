#!/usr/bin/env bash
#
# Install nvim

set -eo pipefail

export DOTFILES_DIR="${DOTFILES_DIR:-$(cd -- "$(dirname "$0")/../.." &>/dev/null && pwd -P)}"
export DOTFILES_TARGET_DIR="${DOTFILES_TARGET_DIR:-$HOME}"

usage() {
  cat <<-EOF
Install nvim.

Options:
  -v <version>
  -n install a nightly build version
  --non-primary if primary, then only install when nvim is not in PATH, otherwise it checks if
                there is a version in user home directory and installs one if there is no one
  --do-all-steps whether to do all the steps, by default it only installs the binary
  --from-source install from source

Examples:
  # Install a specific version only if nvim hasn't been installed.
  $0 -v 0.7.0

  # Install a specific version even if other version already exists.
  $0 -v 0.7.0 --non-primary
EOF
  exit 1
}

version="v0.7.0"
from_source="$INSTALL_FROM_SOURCE"
parse_args="
  -v)
    shift
    version=\"\$1\"
    if [[ ! \"\$version\" =~ ^v ]]; then
      version=\"v\$version\"
    fi
    ;;
  -n)
    version=nightly
    ;;
  --non-primary)
    non_primary=1
    ;;
  --do-all-steps)
    do_all_steps=1
    ;;
  --from-source)
    from_source=1
    ;;
  *)
    usage
    ;;
"

source "$DOTFILES_DIR/scripts/lib/install.sh"

check_link() {
  local always_make="$1"
  [ ! -d "$DOTFILES_TARGET_DIR/bin" ] && mkdir "$DOTFILES_TARGET_DIR/bin"

  if [ -z "$nvim_path" ]; then
    nvim_path="$(check_command nvim)"
  fi
  [ "$always_make" = "1" -a -e "$DOTFILES_TARGET_DIR/bin/vi" ] && rm "$DOTFILES_TARGET_DIR/bin/vi"
  [ -e "$DOTFILES_TARGET_DIR/bin/vi" ] || create_link "$DOTFILES_TARGET_DIR/bin/vi" "$nvim_path"
  [ "$always_make" = "1" -a -e "$DOTFILES_TARGET_DIR/bin/nvim" ] && rm "$DOTFILES_TARGET_DIR/bin/nvim"
  [ -e "$DOTFILES_TARGET_DIR/bin/nvim" ] || create_link "$DOTFILES_TARGET_DIR/bin/nvim" "$nvim_path"
}

if [ "$do_all_steps" = "1" ]; then
  for script in ruby python nodejs; do
    "$(dirname "$BASH_SOURCE")/$script"
  done
fi

install_from_prebuilt() {
  local path_to_save="/tmp/nvim-$version.tar.gz"
  local platform dest_dir sudo_opt
  if is_linux; then
    platform="linux64"
    if [ "$non_primary" = "1" ]; then
      dest_dir="$DOTFILES_TARGET_DIR/nvim-$version"
      nvim_path="$dest_dir/bin/nvim"
    else
      dest_dir="/usr"
      sudo_opt="sudo"
    fi
  elif is_mac; then
    platform="macos"
    dest_dir="$DOTFILES_TARGET_DIR/nvim-$version"
    nvim_path="$dest_dir/bin/nvim"
  else
    abort "Unsupported system"
  fi

  "$DOTFILES_DIR/bin/cget" "https://github.com/neovim/neovim/releases/download/$version/nvim-${platform}.tar.gz" "$path_to_save"

  mkdir -p "$dest_dir"
  $sudo_opt tar zxf "$path_to_save" -C "$dest_dir" --strip-components=1
  rm -rf "$path_to_save"
}

install_from_source() {
  local dir="/tmp/nvim"
  git_clone "https://github.com/neovim/neovim" "$dir" -b "$version" --depth 1

  if has_yum; then
    sudo yum install -y cmake gcc-c++ patch libtool
  elif has_apt; then
    sudo apt-get install -y cmake g++ pkg-config libtool-bin
  fi

  local dest_dir="$DOTFILES_TARGET_DIR/nvim-$version"
  nvim_path="$dest_dir/bin/nvim"
  (cd "$dir"; make CMAKE_INSTALL_PREFIX="$dest_dir" CMAKE_BUILD_TYPE=Release; make install; rm -rf "$dir")
}

if [ "$non_primary" = "1" ] || ! check_command nvim &>/dev/null; then
  if [ "$from_source" = "1" ]; then
    is_mac && abort "Mac OSX doesn't support installation from source"
    install_from_source
  else
    install_from_prebuilt
  fi
  check_link 1
else
  echo "nvim is already found at $(check_command nvim)"
  check_link
fi

if has_apt; then
  # Required for copying to system clipboard.
  sudo apt-get install -y clip
fi

if [ "$do_all_steps" = "1" ]; then
  "$(dirname "$BASH_SOURCE")/../misc/gen_vimrc"
  "$(dirname "$BASH_SOURCE")/../misc/gen_coc_settings"

  # See https://github.com/junegunn/vim-plug/issues/225#issuecomment-583541912
  nvim --headless "+PlugInstall" "+qa!"
  echo 'Installing plugins finished'
fi
