#!/usr/bin/env bash
#
# Install gdb (https://www.gnu.org/software/gdb/).

set -eo pipefail

export DOTFILES_DIR="${DOTFILES_DIR:-$(cd -- "$(dirname "$0")/../.." &>/dev/null && pwd -P)}"
export DOTFILES_TARGET_DIR="${DOTFILES_TARGET_DIR:-$HOME}"

version="12.1"
component=gdb
temp_dir=/tmp/gdb

usage() {
  cat <<-EOF
Usage: $0 [version]

Install gdb. There are three system definitions: host, build, target.
For example, If you build gdb on Mac OSX, and you want to debug Linux app with
x86_64 arch remotely, you must specify '--target x86_64-unknown-linux-gnu'. If you
don't, the built gdb can only debug apps with the same arch and the same
system as the build machine.

You can set cflags like 'export CFLAGS="-Wno-error=constant-logical-operand"'
(or 'export CFLAGS="-Wno-error"' to skip all warnings), but it will only be effective
when 'configure' is invoked.

Options:
  -c <compnent> Component to make, supported values are 'gdb', 'gdbserver', default is 'gdb'

  --host <host>  The system that is going to run the software once it is built, e.g. arm-linux-gnueabi
                 Note: toolchains have a loose name convention like arch[-vendor][-os]-abi.
                 Visit https://stackoverflow.com/a/13798214 for more info.

  --target <target> The system against which the software being built will run on
                    E.g. x86_64-unknown-linux-gnu, arm-linux-gnueabi
                    Note: toolchains have a loose name convention like arch[-vendor][-os]-abi.
                    Visit https://stackoverflow.com/a/13798214 for more info.

  --temp-dir <dir> Temp dir to store the src and build files, default is '/tmp/gdb'

Examples:
  # Build gdb which runs on current system, but can debug linux app with x86_64 arch.
  $> $0 --target x86_64-unknown-linux-gnu

  # Build gdbserver which runs on arm linux system.
  $> $0 -c gdbserver --host arm-linux-gnueabi
EOF
  exit 1
}

parse_args="
  -c)
    shift
    component=\"\$1\"
    ;;
  --host)
    shift
    host=\"\$1\"
    ;;
  --target)
    shift
    target=\"\$1\"
    ;;
  --temp-dir)
    shift
    temp_dir=\"\$1\"
    ;;
  -*)
    usage
    ;;
  *)
    version=\"\$1\"
    ;;
"

source "$DOTFILES_DIR/scripts/lib/install.sh"

dest_path="$DOTFILES_TARGET_DIR/opt/gdb-$version"
[ -e "$dest_path/bin/gdb" ] && exit

check_makeinfo() {
  check_command makeinfo &> /dev/null && return

  if has_yum; then
    sudo yum install -y texinfo
  else
    abort 'Please install `makeinfo` command beforehand.'
  fi
}

install_fn() {
  local dir="$(find "$1" -maxdepth 1 -type d | grep -v '^\.$' | tail -1)"
  cd "$dir"

  local prefix
  if [ -n "$target" ]; then
    prefix="$target-"
  fi

  local build_dir
  if [ -n "$host" ]; then
    build_dir="build-$host-$prefix$component"
  else
    build_dir="build-$prefix$component"
  fi
  mkdir -p "$build_dir"
  cd "$build_dir"

  # For cross compilation, see https://sourceware.org/gdb/wiki/BuildingCrossGDBandGDBserver
  if [ ! -e Makefile ]; then
    local -a opts
    if [ -n "$host" ]; then
      opts+=("--host=$host")
    fi
    if [ -n "$target" ]; then
      opts+=("--target=$target")
    fi
    ../configure --prefix="$dest_path" "${opts[@]}"
  fi

  make "all-$component"
  make "install-$component"

  if [ -z "$host" ]; then
    local link="$DOTFILES_TARGET_DIR/bin/$prefix$component"
    mkdir -p "$DOTFILES_TARGET_DIR/bin"
    [ -e "$link" ] && rm -rf "$link"
    create_link "$link" "$dest_path/bin/$prefix$component"
  fi
}

check_makeinfo
download_and_install "https://mirrors.tuna.tsinghua.edu.cn/gnu/gdb/gdb-$version.tar.xz" install_fn "$temp_dir"
