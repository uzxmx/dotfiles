#!/usr/bin/env bash
#
# Install zsh (https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH)

set -eo pipefail

export DOTFILES_DIR="${DOTFILES_DIR:-$(cd -- "$(dirname "$0")/../.." &>/dev/null && pwd -P)}"
export DOTFILES_TARGET_DIR="${DOTFILES_TARGET_DIR:-$HOME}"

source "$DOTFILES_DIR/scripts/lib/install.sh"

check_current_shell() {
  [ -n "$DOTFILES_NON_INTRUSIVE_MODE" ] && return
  echo 'Checking if current shell is zsh'
  local zsh_path="$(check_command zsh)"
  if [ ! "$(perl -e '@x=getpwuid($<); print $x[8]')" = "$zsh_path" ]; then
    if ! grep "$zsh_path" /etc/shells &>/dev/null; then
      echo "$zsh_path" | sudo tee -a /etc/shells >/dev/null
    fi
    if [ "$USER" = "vagrant" ]; then
      echo "${PASSWORD:-vagrant}" | chsh -s "$zsh_path"
    else
      chsh -s "$zsh_path"
    fi
    echo "Current shell is changed to zsh"
  else
    echo "Current shell is already zsh"
  fi
}

if check_command zsh &> /dev/null; then
  check_current_shell; exit
fi

if has_yum; then
  sudo yum install -y make gcc ncurses-devel autoconf >/dev/null
elif has_apt; then
  sudo apt-get install -y make gcc libncurses5-dev autoconf >/dev/null
fi

version="5.8"

install_fn() {
  local dir="$(find "$1" -maxdepth 1 -type d | grep -v '^\.$' | tail -1)"
  cd "$dir"

  local configure_opts=(--without-tcsetpgrp)
  local sudo_opt
  if [ -n "$DOTFILES_NON_INTRUSIVE_MODE" ]; then
    configure_opts+=(--prefix="$DOTFILES_TARGET_DIR/opt/zsh-$version")
  else
    sudo_opt="sudo"
  fi
  if is_mac; then
    # For Mac OSX, we may need to specify below CFLAGS, otherwise, the built zsh may be stuck on startup.
    # See https://github.com/Homebrew/homebrew-core/pull/64923
    configure_opts+=(--enable-cflags=-Wno-implicit-function-declaration)
  fi
  [ ! -e ./configure ] && autoreconf
  ./configure "${configure_opts[@]}"
  make
  # Skip the targets that may fail on some system.
  $sudo_opt make -o install.man -o install.runhelp install

  check_current_shell

  [ -n "$DOTFILES_NON_INTRUSIVE_MODE" ] && mkdir -p "$DOTFILES_TARGET_DIR/bin" && create_link "$DOTFILES_TARGET_DIR/bin/zsh" "$DOTFILES_TARGET_DIR/opt/zsh-$version/bin/zsh"

  local platform
  if is_mac; then
    platform=osx
  elif is_wsl; then
    platform=wsl
  fi

  if [ -n "$platform" -a -f "$DOTFILES_TARGET_DIR/.zshrc.$platform" ]; then
    if [ -f "$DOTFILES_TARGET_DIR/.zshrc.platform" ]; then
      if [ $? != 0 -o "$(readlink "$DOTFILES_TARGET_DIR/.zshrc.platform")" != "$DOTFILES_TARGET_DIR/.zshrc.$platform" ]; then
        warn "Failed to link '$DOTFILES_TARGET_DIR/.zshrc.platform' to '$DOTFILES_TARGET_DIR/.zshrc.$platform', please check '$DOTFILES_TARGET_DIR/.zshrc.platform'"
      fi
    else
      ln -s "$DOTFILES_TARGET_DIR/.zshrc.$platform" "$DOTFILES_TARGET_DIR/.zshrc.platform"
    fi
  fi
}

download_and_install "https://github.com/zsh-users/zsh/archive/refs/tags/zsh-$version.tar.gz" install_fn
