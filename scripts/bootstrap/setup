#!/usr/bin/env bash

set -eo pipefail

usage() {
  cat <<-EOF
Utility to setup dotfiles repository in current system.

This script tries to leave footprints as less as possible, which is a much
safer way when setting up in a machine shared with other users. This means you
need to specify something explicitly to enable it.

A pod represents the smallest unit of the setup. You can find all the pods in
'pods' file. A type represents a predefined collection of pods. Supported types
include:

* minimal: only essential pods
* full: all pods

Options:
  -p, --proxy <proxy> http proxy
  -v, --verbose show verbose output
  --update-repo fetch new updates from remote before setting up
  -t, --type setup type, e.g. minimal, full

  --root <root-dir> root directory to clone to
  --git-ssh use git ssh protocol to clone, by default https is used
  --git-clone-args <args> arguments which are passed into git clone
EOF
  exit 1
}

pods=()
while [ "$#" -gt 0 ]; do
  case "$1" in
    -p | --proxy)
      shift
      user_http_proxy="$1"
      ;;
    -v | --verbose)
      export verbose=1
      ;;
    --update-repo)
      update_repo=1
      ;;
    -t | --type)
      shift
      setup_type="$1"
      ;;
    --root)
      shift
      export DOTFILES_ROOT="$1"
      ;;
    --git-ssh)
      export GIT_CLONE_WITH_SSH=1
      ;;
    --git-clone-args)
      shift
      export GIT_CLONE_ARGS="$1"
      ;;
    -*)
      usage
      ;;
    *)
      pods+=("$1")
      ;;
  esac
  shift
done

run() {
  if [ "$verbose" = "1" ]; then
    echo "Run: $@" >&2
  fi
  eval "$@"
}
export -f run

run_with_proxy() {
  if [ -n "$user_http_proxy" ]; then
    export http_proxy=http://$user_http_proxy
    export HTTP_PROXY=http://$user_http_proxy
    export https_proxy=http://$user_http_proxy
    export HTTPS_PROXY=http://$user_http_proxy
  fi

  run "$@"

  if [ -n "$user_http_proxy" ]; then
    unset http_proxy HTTP_PROXY https_proxy HTTPS_PROXY
  fi
}

if ! [ "$(basename $(dirname "$BASH_SOURCE"))" = "bootstrap" -a "$(basename "$(dirname $(dirname "$BASH_SOURCE"))")" = "scripts" ]; then
  # Download and execute stage0 script.
  REMOTE_STAGE0_SCRIPT="${REMOTE_STAGE0_SCRIPT:-https://raw.githubusercontent.com/uzxmx/dotfiles/master/scripts/bootstrap/inc/stage0}"

  is_available() {
    type -p "$1" &> /dev/null
  }

  if ! is_available curl && ! is_available wget; then
    if is_available apt-get; then
      sudo apt-get install -y curl
    elif is_available yum; then
      sudo yum install -y curl
    elif is_available brew; then
      # TODO For mac, install brew if it is unavailable.
      brew install curl
    else
      echo 'Unsupported system'
      exit 1
    fi
  fi

  tmpfile="$(mktemp)"
  handle_exit() {
    [ -e "$tmpfile" ] && rm "$tmpfile"
  }
  trap handle_exit EXIT

  if is_available curl; then
    run_with_proxy curl -o "$tmpfile" "$REMOTE_STAGE0_SCRIPT"
  elif is_available wget; then
    run_with_proxy wget -O "$tmpfile" "$REMOTE_STAGE0_SCRIPT"
  else
    echo 'No curl or wget found'
    exit 1
  fi

  source "$tmpfile"
else
  DOTFILES_ROOT="$(realpath "$(dirname "$BASH_SOURCE")/../..")"
  source "$DOTFILES_ROOT/scripts/bootstrap/inc/stage0"
fi

# Do real setup.
cd "$DOTFILES_ROOT"

build_pods_for_type() {
  local file
  if [ "$1" = "full" ]; then
    file="$DOTFILES_ROOT/scripts/bootstrap/pods"
  else
    file="$DOTFILES_ROOT/scripts/bootstrap/$1_pods"
  fi
  while read pod; do
    pods+=("$pod")
  done < <(cat "$file")
}

check_pod() {
  if ! grep -Fx "$1" "$DOTFILES_ROOT/scripts/bootstrap/pods" &>/dev/null; then
    echo "Pod $1 doesn't exist"
    exit 1
  fi
}

enable_pod() {
  export pod_$1=1
}

is_pod_enabled() {
  [ "$(eval echo "\$pod_$1")" = "1" ]
}
export -f is_pod_enabled

case "$setup_type" in
  full | minimal)
    build_pods_for_type "$setup_type"
    ;;
  .*)
    echo "Unsupported setup type: $setup_type"
    exit 1
    ;;
esac

if [ "${#pods[@]}" -eq 0 ]; then
  echo "No pod specified."
  exit 1
fi

for pod in "${pods[@]}"; do
  check_pod "$pod"
  enable_pod "$pod"
done

source ./scripts/lib/utils.sh

is_pod_enabled sudo_nopasswd && run ./scripts/misc/set_sudo_nopasswd

if [ -n "$user_http_proxy" ]; then
  # Create a symlink for gitconfig, so git http proxy can be shown correctly.
  if [ ! -e ~/.gitconfig ]; then
    run ln -s "$DOTFILES_ROOT/gitconfig" ~/.gitconfig
  fi

  source ./scripts/misc/bash_proxyctl
  pe -p "$user_http_proxy" http git curl
  trap pd EXIT
fi

is_pod_enabled system_repo_mirror && run ./scripts/misc/setup_system_repo_mirror

pods=(
  prerequisites
  rcm
  zsh
  antibody
  hstr
  rlwrap
  asdf
)

for pod in "${pods[@]}"; do
  is_pod_enabled "$pod" || continue

  run "./scripts/install/$pod"

  case "$pod" in
    rcm)
      run rcup

      # Fix bad permissions.
      [ -f ~/.ssh/config ] && chmod 600 ~/.ssh/config
      ;;
  esac
done

[ -f ~/.asdf/asdf.sh ] && source ~/.asdf/asdf.sh

export GOPATH="$HOME/go"
export GO111MODULE=on
export GOPROXY="https://goproxy.cn,https://gocenter.io,https://goproxy.io,direct"

pods=(
  nodejs
  nvim
  tmux
  bc
  socat
  fzf
  fd
  rg
)

for pod in "${pods[@]}"; do
  is_pod_enabled "$pod" || continue
  run "./scripts/install/$pod"

  case "$pod" in
    nvim)
      run ./scripts/install/coc_extensions ultisnips

      is_pod_enabled coc_python && run ./scripts/install/coc_extensions python

      is_pod_enabled java && run ./scripts/install/java

      if is_pod_enabled coc_java; then
        run ./scripts/install/coc_extensions java
        run ./scripts/install/lombok
      fi

      is_pod_enabled maven && ./scripts/install/mvn

      is_pod_enabled go && run ./scripts/install/golang

      is_pod_enabled gopls && run ./scripts/install/gopls
      ;;
  esac
done

if is_pod_enabled perl; then
  # Required by ssh wrapper.
  if ! perl -MJSON::PP -e 1 &>/dev/null; then
    run ./scripts/install/perl
  fi
fi

for pod in cpanm perl_modules; do
  is_pod_enabled "$pod" || continue
  run "./scripts/install/$pod"
done
