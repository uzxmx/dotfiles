#!/usr/bin/env bash

set -eo pipefail

dotfiles_dir="$(realpath "$(dirname "$BASH_SOURCE")/../..")"

usage() {
  cat <<-EOF
Usage: $0

This script runs a simple HTTP server for experiment or test purpose.

Options:
  -H <host> the host to bind to, default is 0.0.0.0
  -p <port> the port to bind to, default is 8010
  --tls use TLS
  --cert <cert-file> the path to the certificate file
  --priv-key <private-key-file> the path to the private key file

Examples:
  # Start https server
  start_http_server --tls --cert cert.pem --priv-key privkey.pem

  # Install CA on Android by visiting http://<IP>:8010/mitmproxy-ca-cert.cer
  cd ~/.mitmproxy && start_http_server
EOF
  exit 1
}

host="0.0.0.0"
port="8010"

while [ "$#" -gt 0 ]; do
  case "$1" in
    -H)
      shift
      host="$1"
      ;;
    -p)
      shift
      port="$1"
      ;;
    --tls)
      use_tls=1
      ;;
    --cert)
      shift
      cert="$1"
      ;;
    --priv-key)
      shift
      priv_key="$1"
      ;;
    *)
      usage
  esac
  shift
done

[ "$use_tls" = "1" ] && [ -z "$cert" -o -z "$priv_key" ] && \
  echo "You must specify a certificate file and private key file when using TLS." && exit 1

run_go_http_server() {
  source "$dotfiles_dir/scripts/lib/tmpfile.sh"

  create_tmpdir tmpdir
  if [ "$use_tls" ]; then
  cat <<EOF >"$tmpdir/main.go"
package main

import "fmt"
import "net/http"

func main() {
  fmt.Println("Running server at $host:$port")
  http.ListenAndServeTLS("$host:$port", "$cert", "$priv_key", http.FileServer(http.Dir(".")))
}
EOF
  else
  cat <<EOF >"$tmpdir/main.go"
package main

import "fmt"
import "net/http"

func main() {
  fmt.Println("Running server at $host:$port")
  http.ListenAndServe("$host:$port", http.FileServer(http.Dir(".")))
}
EOF
  fi

  go run "$tmpdir/main.go"
}

run_ruby_http_server() {
  ruby -r webrick -e "WEBrick::HTTPServer.new(BindAddress: '$host', Port: $port, DocumentRoot: Dir.pwd).start"
}

run_netcat() {
  echo "HTTP server will be listening at $port"
  while true; do
    echo -e "HTTP/1.1 200 OK\n\n $(date)" | nc -l "$port"
  done
}

if type -p go &>/dev/null; then
  run_go_http_server
elif type -p ruby &>/dev/null; then
  run_ruby_http_server
elif type -p python3 &>/dev/null; then
  python3 -m http.server --bind "$host" "$port"
elif type -p nc &>/dev/null; then
  run_netcat
else
  echo "Cannot find a proper way to start an HTTP server"
fi
