#!/usr/bin/env bash

set -eo pipefail

dotfiles_dir="$(realpath "$(dirname "$BASH_SOURCE")/../..")"

. "$dotfiles_dir/scripts/lib/system.sh"

usage() {
  cat <<-EOF
Usage:
$0 <enable | disable | info> [proxy types...] [-p proxy_server]

This script helps you manage proxy. It includes enable, disable and dump actions
for http, git, curl, and docker etc. For http, the change is only in current shell.
For others, the change is global. Supported proxy types include:

  http / git / curl / docker / yum / scoop / all

For enable and disable subcommands, when proxy types are not specified, the
defaults are http / git / curl / yum / scoop. For info subcommand, the defaults
are all types.

If the machine is a vagrant box, you may use 10.0.2.2 to access the host.

Conventions:

Port 8125 is used as the v2ray http proxy port, which supports whitelist (By
default the first candidate to try).

Port 8124 can be used as a ssh tunnelled port. For example, we can
start a ssh tunnel by 'ssh user@host -L 0.0.0.0:8124:localhost:8123'.
This requires a remote http proxy is listening at 8123 on the remote server.

Port 8123 is used as the v2ray http proxy port, where all trafic will
go to a same outbound (no whitelist).

Options:
  -a Try port 8123 first
  -d Dry run, currently output commands for enabling HTTP proxy in a shell
  --no-check Don't check if the proxy server is running or not

Examples:
  $> pe          # Enable proxy of default types.
  $> pe docker   # Enable docker proxy.
  $> pe all      # Enable all proxy types.
  $> pd          # Disable proxy of default types.
  $> pi          # Show status of all proxy types.
EOF
  exit 1
}

subcommand="$1"
case "$1" in
  enable | disable | info)
    shift
    ;;
  *)
    usage
    ;;
esac

fatal() {
  echo "$@" >&2
  exit 1
}

test_proxy() {
  if ! type -p nc &>/dev/null; then
    "$dotfiles_dir/scripts/install/netcat"
  fi

  local ary host port
  ary=($(echo "$1" | tr ":" "\n"))
  host=${ary[0]}
  port=${ary[1]}
  nc -z -w 5 "$host" "$port" &>/dev/null
}

remainder=()
first_port_to_try="8125"
last_port_to_try="8123"
while [ "$#" -gt 0 ]; do
  case "$1" in
    -a)
      first_port_to_try="8123"
      last_port_to_try="8125"
      ;;
    -p)
      shift
      user_http_proxy="$1"
      ;;
    -d)
      subcommand="enable"
      dry_run=1
      no_check=1
      ;;
    --no-check)
      no_check=1
      ;;
    -*)
      usage
      ;;
    *)
      remainder+=("$1")
      ;;
  esac
  shift
done

set - "${remainder[@]}"

if [ "$subcommand" = "enable" -a -z "$no_check" -a -n "$user_http_proxy" ]; then
  test_proxy "$user_http_proxy" || fatal "HTTP Proxy $user_http_proxy is unreachable."
fi

if [ "$subcommand" = "enable" ]; then
  if [[ -z "$user_http_proxy" ]]; then
    echo 'Choosing a working proxy server...'
    if [[ -n "$DEFAULT_HTTP_PROXY" ]] && test_proxy $DEFAULT_HTTP_PROXY_HOST; then
      user_http_proxy="$DEFAULT_HTTP_PROXY"
    elif test_proxy "localhost:$first_port_to_try"; then
      user_http_proxy="localhost:$first_port_to_try"
    elif test_proxy localhost:8124; then
      user_http_proxy="localhost:8124"
    elif test_proxy "localhost:$last_port_to_try"; then
      user_http_proxy="localhost:$last_port_to_try"
    elif [ -d /home/vagrant ] && test_proxy "10.0.2.2:$first_port_to_try"; then
      user_http_proxy="10.0.2.2:$first_port_to_try"
    elif [ -d /home/vagrant ] && test_proxy 10.0.2.2:8124; then
      user_http_proxy="10.0.2.2:8124"
    elif [ -d /home/vagrant ] && test_proxy "10.0.2.2:$last_port_to_try"; then
      user_http_proxy="10.0.2.2:$last_port_to_try"
    else
      fatal "Not found any working HTTP Proxy."
    fi
    echo 'Done'
  fi
fi

if [ "$dry_run" = "1" ]; then
  target_http=1
else
  if [ "$#" -eq 0 ]; then
    target_http=1
    target_git=1
    target_curl=1
    target_yum=1
    target_scoop=1
    if [ "$subcommand" = "info" ]; then
      target_docker=1
    fi
  else
    for i in "$@"; do
      case "$i" in
        http | git | curl | docker | yum | scoop | all)
          eval "target_$i=1"
      esac
    done
  fi
fi

enable_http_proxy() {
  local commands="
export http_proxy=http://$user_http_proxy
export HTTP_PROXY=http://$user_http_proxy
export https_proxy=http://$user_http_proxy
export HTTPS_PROXY=http://$user_http_proxy"

  if [ "$dry_run" = "1" ]; then
    echo "$commands"
  else
    echo "$commands" >&3
    dump_http_proxy
  fi
}

disable_http_proxy() {
  cat <<EOF >&3
unset http_proxy
unset HTTP_PROXY
unset https_proxy
unset HTTPS_PROXY
EOF

  dump_http_proxy
}

dump_http_proxy() {
  cat <<EOF >&3
echo "Current http_proxy: \$http_proxy"
echo "Current HTTP_PROXY: \$HTTP_PROXY"
echo "Current https_proxy: \$https_proxy"
echo "Current HTTPS_PROXY: \$HTTPS_PROXY"
EOF
}

enable_git_proxy() {
  git config --file ~/.gitconfig.local http.proxy http://$user_http_proxy
  # TODO test if this works
  git config --file ~/.gitconfig.local https.proxy https://$user_http_proxy
  dump_git_proxy
}

disable_git_proxy() {
  git config --unset --file ~/.gitconfig.local http.proxy
  git config --unset --file ~/.gitconfig.local https.proxy
  dump_git_proxy
}

dump_git_proxy() {
  cat <<EOF >&3
echo "Current Git http.proxy: $(git config --get http.proxy)"
echo "Current Git https.proxy: $(git config --get https.proxy)"
EOF
}

enable_curl_proxy() {
  if [ ! -f ~/.curlrc ]; then
    touch ~/.curlrc
  fi

  if grep -E '^proxy ?= ?.*$' ~/.curlrc &>/dev/null; then
    source "$dotfiles_dir/scripts/lib/gsed.sh"
    $SED -i -E "s/^proxy ?= ?.*$/proxy = $user_http_proxy/" ~/.curlrc
  else
    echo "proxy = $user_http_proxy" >>~/.curlrc
  fi

  dump_curl_proxy
}

disable_curl_proxy() {
  if grep -E '^proxy ?= ?.*$' ~/.curlrc &>/dev/null; then
    source "$dotfiles_dir/scripts/lib/gsed.sh"
    $SED -i -E '/^proxy ?= ?.*$/d' ~/.curlrc
  fi

  dump_curl_proxy
}

dump_curl_proxy() {
  local proxy="$(grep -E '^proxy ?= ?.+$' ~/.curlrc 2>/dev/null || true)"
  echo "echo -n Current Curl proxy:" >&3
  if [ -n "$proxy" ]; then
    echo "echo \" $(echo $proxy | awk '{print $3}')\"" >&3
  else
    echo 'echo' >&3
  fi
}

enable_docker_proxy() {
  if has_systemd; then
    # See https://docs.docker.com/config/daemon/systemd/#httphttps-proxy
    sudo mkdir -p /etc/systemd/system/docker.service.d
    sudo tee /etc/systemd/system/docker.service.d/http-proxy.conf >/dev/null <<EOF
[Service]
Environment="HTTP_PROXY=http://$user_http_proxy/"
EOF
    sudo tee /etc/systemd/system/docker.service.d/https-proxy.conf >/dev/null <<EOF
[Service]
Environment="HTTPS_PROXY=http://$user_http_proxy/"
EOF

    sudo systemctl daemon-reload
    sudo systemctl restart docker

    dump_docker_proxy
  fi
}

disable_docker_proxy() {
  if has_systemd; then
    sudo rm /etc/systemd/system/docker.service.d/{http,https}-proxy.conf
    sudo systemctl daemon-reload
    sudo systemctl restart docker

    dump_docker_proxy
  fi
}

dump_docker_proxy() {
  if has_systemd; then
    echo "echo Current Docker proxy: $(systemctl show --property=Environment docker)" >&3
  else
    echo "echo Current Docker proxy: N/A" >&3
  fi
}

enable_yum_proxy() {
  if type -p yum &>/dev/null; then
    source "$dotfiles_dir/scripts/lib/gsed.sh"
    if grep -E '^proxy=.*$' /etc/yum.conf &>/dev/null; then
      sudo $SED -i -E "s/^proxy=.*$/proxy=http:\\/\\/$user_http_proxy/" /etc/yum.conf
    else
      # This assumes `[main]` exists in /etc/yum.conf
      sudo $SED -i -E "/^\\[main\\]$/a proxy=http:\\/\\/$user_http_proxy" /etc/yum.conf
    fi

    dump_yum_proxy
  fi
}

disable_yum_proxy() {
  if type -p yum &>/dev/null; then
    if grep -E '^proxy=.*$' /etc/yum.conf &>/dev/null; then
      source "$dotfiles_dir/scripts/lib/gsed.sh"
      sudo $SED -i -E '/^proxy=.*$/d' /etc/yum.conf
    fi

    dump_yum_proxy
  fi
}

dump_yum_proxy() {
  if type -p yum &>/dev/null; then
    proxy="$(grep -E '^proxy=.+$' /etc/yum.conf || true)"
    echo "echo -n Current YUM proxy:" >&3
    if [ -n "$proxy" ]; then
      echo "echo \" $(echo $proxy | awk -F= '{print $2}')\"" >&3
    else
      echo 'echo' >&3
    fi
  fi
}

enable_scoop_proxy() {
  if is_wsl; then
    scoop config proxy "$user_http_proxy" >/dev/null
    dump_scoop_proxy
  fi
}

disable_scoop_proxy() {
  if is_wsl; then
    scoop config rm proxy &>/dev/null
    dump_scoop_proxy
  fi
}

dump_scoop_proxy() {
  if is_wsl; then
    proxy="$(scoop config proxy)"
    echo "echo -n Current Scoop proxy:" >&3
    if [ -n "$proxy" ] && ! echo "$proxy" | grep not &>/dev/null; then
      echo "echo \" $proxy\"" >&3
    else
      echo 'echo' >&3
    fi
  fi
}

case "$subcommand" in
  enable)
    [ -n "$target_http"   -o -n "$target_all" ] && enable_http_proxy
    [ -n "$target_git"    -o -n "$target_all" ] && enable_git_proxy
    [ -n "$target_curl"   -o -n "$target_all" ] && enable_curl_proxy
    [ -n "$target_docker" -o -n "$target_all" ] && enable_docker_proxy
    [ -n "$target_yum"    -o -n "$target_all" ] && enable_yum_proxy
    [ -n "$target_scoop"  -o -n "$target_all" ] && enable_scoop_proxy
    ;;
  disable)
    [ -n "$target_http"   -o -n "$target_all" ] && disable_http_proxy
    [ -n "$target_git"    -o -n "$target_all" ] && disable_git_proxy
    [ -n "$target_curl"   -o -n "$target_all" ] && disable_curl_proxy
    [ -n "$target_docker" -o -n "$target_all" ] && disable_docker_proxy
    [ -n "$target_yum"    -o -n "$target_all" ] && disable_yum_proxy
    [ -n "$target_scoop"  -o -n "$target_all" ] && disable_scoop_proxy
    ;;
  info)
    [ -n "$target_http"   -o -n "$target_all" ] && dump_http_proxy
    [ -n "$target_git"    -o -n "$target_all" ] && dump_git_proxy
    [ -n "$target_curl"   -o -n "$target_all" ] && dump_curl_proxy
    [ -n "$target_docker" -o -n "$target_all" ] && dump_docker_proxy
    [ -n "$target_yum"    -o -n "$target_all" ] && dump_yum_proxy
    [ -n "$target_scoop"  -o -n "$target_all" ] && dump_scoop_proxy
    ;;
esac

exit 0
