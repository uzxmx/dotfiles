#!/usr/bin/env bash

set -eo pipefail

dotfiles_dir="$(realpath "$(dirname "$BASH_SOURCE")/..")"

usage() {
  cat <<-EOF
Usage: $0 [directory]...

Use fzf to select a file and open it with the default editor.

Options:
  [-t type] The file type to search, e.g. cpp
  [-p pattern] The pattern to search
  [-q query] The query
  [-I,--no-ignore] Show search results from files and directories that would
                   otherwise be ignored by .gitignore, .ignore or .fdignore files
  [-h] Show help

Examples:
  # Search files by type.
  $ $0 -t cpp

  # Search files with .cpp extension.
  $ $0 -p '\.cpp$'
EOF
  exit 1
}

directories=()
no_ignore=
while [ $# -gt 0 ]; do
  case "$1" in
    -t)
      shift
      pattern="\.$1$"
      ;;
    -p)
      shift
      pattern="$1"
      ;;
    -q)
      shift
      query="$1"
      ;;
    -I | --no-ignore)
      no_ignore=1
      ;;
    -*)
      usage
      ;;
    *)
      directories+=("$1")
      ;;
  esac
  shift
done

if [ "${#directories}" -eq 0 ]; then
  directories=(.)
else
  for dir in "${directories[@]}"; do
    if [ ! -d "$dir" ]; then
      echo "Directory $dir does not exist."
      exit 1
    fi
  done
fi

source "$dotfiles_dir/scripts/lib/utils/common.sh"
source "$dotfiles_dir/scripts/lib/fzf.sh"

while true; do
  unset result

  fd_opts=(--type f)
  if [ -n "$no_ignore" ]; then
    fd_opts+=(-I -H)
  fi

  call_fzf result --query="$query" --print-query --multi --exit-0 \
    --prompt '(CTRL-V:copy CTRL-Y:yank CTRL-T:edit CTRL-I:toggle-ignore CTRL-D:cd CTRL-X:exec)> ' \
    --expect="ctrl-v,ctrl-t,ctrl-i,ctrl-d,ctrl-x" \
    < <(fd "${fd_opts[@]}" "${pattern:-.}" "${directories[@]}")

  [ -z "${result[*]}" ] && break

  query="${result[0]}"
  key="${result[1]}"
  result=("${result[@]:2}")
  case "$key" in
    ctrl-v)
      src_file="${result[0]}"
      if [ -z "$src_file" ]; then
        echo 'A source file is required when creating a new file.'
        exit 1
      fi
      while true; do
        target_file=$(rlwrap -S "Target file: " -P "$src_file" -o cat)
        if [ -e "$target_file" ]; then
          echo "File '$target_file' already exists"
        else
          break
        fi
      done
      cp "$src_file" "$target_file"
      result=("$target_file")
      break
      ;;
    ctrl-t)
      echo "${result[0]}" >&3
      exit 101
      break
      ;;
    ctrl-i)
      if [ -z "$no_ignore" ]; then
        no_ignore=1
      else
        no_ignore=
      fi
      ;;
    ctrl-d | ctrl-x | "")
      if [ "${#result[@]}" -eq 0 ]; then
        echo "No file available"
        exit
      fi
      file="${result[0]}"
      if [ "$key" = "ctrl-d" ]; then
        echo "cd '$(dirname "$file")'" >&3
        exit
      elif [ "$key" = "ctrl-x" ]; then
        [ ! -x "$file" ] && echo "$file is not an executable." && exit
        echo "$(realpath "$file")" >&3
        exit 100
      fi
      break
      ;;
  esac
done

if [ "${#result[@]}" -ne 0 ]; then
  if [[ "${#result[@]}" -eq 1 && "${result[0]}" =~ \.(png|jpg|jpeg)$ ]]; then
    source "$dotfiles_dir/scripts/lib/prompt.sh"
    if [ "$(yesno "Using open utility to handle this file? (Y/n)" "yes")" = "yes" ]; then
      open "${result[0]}"
      exit
    fi
  fi
  editor=${EDITOR:-vim}
  if [ "$editor" = "vi" -o "$editor" = "vim" -o "$editor" = "nvim" ]; then
    # Invoke `Rooter` command to change to correct root directory.
    args="+Rooter"
  fi
  $editor $args "${result[@]}"
fi
