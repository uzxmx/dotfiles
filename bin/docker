#!/usr/bin/env bash

set -e

export DOTFILES_DIR="${DOTFILES_DIR:-$(cd -- "$(dirname "$0")/.." &>/dev/null && pwd -P)}"
docker_dir="$DOTFILES_DIR/scripts/docker"

source "$DOTFILES_DIR/scripts/lib/cli.sh"

usage() {
  cat <<-EOF
Wrapper for docker utility.

Show commands:
  l          - show logs of a container selected by fzf
  ps         - list containers
  list_tags  - list image tags from dockerhub
  pids       - show pids of containers

Remove commands:
  rm         - remove docker containers
  prune      - remove unused data
  rmi        - remove images in batch by editor

Misc commands:
  p          - pull image from a mirror
  e, exec    - execute a comand in a container selected by fzf
  r, run     - run a docker image
  s          - manage services
  engine     - manage engine
  copy       - copy to/from a docker container
EOF
  exit 1
}

usage_list_tags() {
  cat <<-EOF
Usage: docker list_tags <image>

List docker image tags from dockerhub.

Examples:
  $ docker list_tags alpine
  $ docker list_tags bitnami/phabricator
EOF
  exit 1
}

cmd_list_tags() {
  "$docker_dir/list_tags" "$@"
}

usage_pids() {
  cat <<-EOF
Usage: docker pids

Show pids of containers.
EOF
  exit 1
}

cmd_pids() {
  "$docker_dir/inspect_pid" "$@"
}

cmd_prune() {
  source "$DOTFILES_DIR/scripts/lib/prompt.sh"
  # local reply="$(yesno "Are you sure you want to remove all unused images and volumes? (y/N)" "no")"
  # [ "$reply" = "no" ] && echo Cancelled && exit
  # docker image prune -a -f
  # docker volume prune -f
  echo "This operation will remove build cache (base images need to be downloaded again). Are you sure to proceed?"
  [ "$(yesno "(y/N)" "no")" = "no" ] && echo Cancelled && exit
  docker system prune -a
}

[ "$#" -eq 0 ] && usage

case "$1" in
  list_tags | pids | prune)
    run "$@"
    ;;
  l | e | exec | p | r | run | rm | s | ps | rmi | engine | copy)
    case "$1" in
      l)
        name="logs"
        ;;
      e)
        name="exec"
        ;;
      p)
        name="pull_image"
        ;;
      r)
        name="run"
        ;;
      s)
        name="service"
        ;;
      *)
        name="$1"
    esac
    source "$docker_dir/$name.sh"
    run "$@"
    ;;
  -h)
    usage
    ;;
  -)
    shift
    docker "$@"
    ;;
  *)
    docker "$@"
    ;;
esac
