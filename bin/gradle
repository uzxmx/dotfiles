#!/usr/bin/env bash

set -eo pipefail

dotfiles_dir="$(realpath "$(dirname "$BASH_SOURCE")/..")"
gradle_dir="$dotfiles_dir/scripts/gradle"

usage() {
  cat <<-EOF
Wrapper for gradle utility.

It tries to find a gradle wrapper first. If not found, it resorts to gradle
command.

Subcommands:
  help     - show gradle help
  tasks    - show all tasks
  boot_run - run spring-boot based project
  boot_cli - run CLI for a spring-boot based project
  run_java - run a java main class
  mirror   - manage(show/enable/disable) maven mirrors
  android  - android related utilities
  test     - override to add default options

Tasks:
  showRepos                - show repositories
  showBuildScriptRepos     - show buildscript repositories
  showBuildScriptClasspath - show buildscript classpath

Options:
  --no-wrapper do not use gradle wrapper
EOF
  exit 1
}

source "$dotfiles_dir/scripts/lib/path.sh"
PATH="$(new_path_exclude "$dotfiles_dir/bin")"

alias_cmd() {
  local new_name="$1"
  local old_name="$2"
  eval "
    usage_$new_name() {
      usage_$old_name \"\$@\"
    }
    cmd_$new_name() {
      cmd_$old_name \"\$@\"
    }
  "
}

source "$dotfiles_dir/scripts/lib/gradle.sh"

remainder=()
while [ "$#" -gt 0 ]; do
  case "$1" in
    --no-wrapper)
      gradle_bin="gradle"
      ;;
    *)
      remainder+=("$1")
      ;;
  esac
  shift
done
set - "${remainder[@]}"

run() {
  local cmd="$1"
  shift
  case "$1" in
    -h)
      type "usage_$cmd" &>/dev/null && "usage_$cmd"
      ;;
  esac
  "cmd_$cmd" "$@"
}

def_task_cmds() {
  local script="$1"
  local cmd
  for cmd in "$@"; do
    eval "
      cmd_$cmd() {
        run_task \"$script\" \"$cmd\" \"\$@\"
      }
    "
  done
}

case "$1" in
  tasks | boot_run | boot_cli | mirror | android | test | run_java)
    source "$gradle_dir/$1.sh"
    run "$@"
    ;;
  showRepos | showBuildScriptRepos | showBuildScriptClasspath)
    source "$gradle_dir/utils.sh"
    run "$@"
    ;;
  -h)
    usage
    ;;
  -)
    shift
    "$gradle_bin" "$@"
    ;;
  *)
    "$gradle_bin" "$@"
    ;;
esac
