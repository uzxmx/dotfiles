#!/usr/bin/env bash

set -e

dotfiles_dir="$(realpath "$(dirname "$BASH_SOURCE")/..")"

usage() {
  cat <<-EOF
Usage: s [directory-or-file]...

Search file contents.

Shortcuts:
  <enter>: Open selected file in curren shell.
  ctrl-v: View selected file in tmux panel.

Options:
  [-t type] The file type to search, e.g. cpp
  [--binary] Resort to grep searching binary files
  [--filename] Also search filename
  [-h] Show help

Examples:
  # Only search files matching some type.
  $ s -t cpp
EOF
  exit 1
}

rg_options=()

files=()
while [ $# -gt 0 ]; do
  case "$1" in
    -t)
      shift
      rg_options+=("-t" "$1")
      ;;
    --binary)
      search_binary=1
      ;;
    --filename)
      search_filename=1
      ;;
    -*)
      usage
      ;;
    *)
      files+=("$1")
      ;;
  esac
  shift
done

if [ "${#files}" -eq 0 ]; then
  files=(.)
fi

source "$dotfiles_dir/scripts/lib/utils/common.sh"
source "$dotfiles_dir/scripts/lib/fzf.sh"

# rg doesn't support --binary well. So we resort to grep.
if [ "$search_binary" = "1" ]; then
  cmd_name="grep"
  cmd_opts=(--line-number --binary-files=text . -R "${files[@]}")
else
  cmd_name="rg"
  cmd_opts=(-L --line-number --with-filename --hidden "${rg_options[@]}" . "${files[@]}")
fi

export BAT_STYLE="numbers,header"
no_ignore=
while true; do
  unset result

  if [ "$cmd_name" = "rg" -a -n "$no_ignore" ]; then
    cmd=("$cmd_name" --no-ignore "${cmd_opts[@]}")
  else
    cmd=("$cmd_name" "${cmd_opts[@]}")
  fi

  if [ "$cmd_name" = "rg" ]; then
    prompt="(CTRL-V:vsplit CTRL-Y:yank CTRL-E:edit CTRL-I:toggle-ignore CTRL-X:exec CTRL-R:refresh)> "
    expect="ctrl-e,ctrl-i,ctrl-x,ctrl-r"
  else
    prompt="(CTRL-V:vsplit CTRL-Y:yank CTRL-E:edit CTRL-X:exec CTRL-R:refresh)> "
    expect="ctrl-e,ctrl-x,ctrl-r"
  fi

  # Note: {} is single quoted in fzf, so below we use `$(echo -n {2})` to strip single quotes.
  # Ref:
  #   https://github.com/junegunn/fzf#executing-external-programs
  #   https://github.com/junegunn/fzf/issues/1586#issuecomment-495961993
  call_fzf result --delimiter=: --nth=3.. --preview "$dotfiles_dir/scripts/misc/preview {}" \
    --query="$query" --print-query \
    --prompt "$prompt" \
    --expect "$expect" \
    --bind 'ctrl-v:execute(tmux split-window "if [ -n {1} ]; then vi {1} \"+norm $(echo -n {2})G\"; else; vi {3}; fi")' \
    < <("${cmd[@]}"; [ "$search_filename" = "1" ] && fd --type f . "${files[@]}" | awk '{printf "::%s\n", $1}')

  [ -z "${result[*]}" ] && break

  query="${result[0]}"
  key="${result[1]}"
  selection="${result[2]}"

  [ "$key" = "ctrl-r" ] && continue

  if [ -n "$selection" ]; then
    file="$(echo -E "$selection" | awk -F : '{print $1}')"
    if [ -z "$file" ]; then
      file="$(echo -E "$selection" | awk -F : '{print $3}')"
    else
      lineno="$(echo -E "$selection" | awk -F : '{print $2}')"
    fi
  fi

  if [ -n "$file" ]; then
    case "$key" in
      ctrl-e)
        echo "$file" >&3
        exit 101
        ;;
      ctrl-i)
        if [ -z "$no_ignore" ]; then
          no_ignore=1
        else
          no_ignore=
        fi
        ;;
      ctrl-x)
        [ ! -x "$file" ] && echo "$file is not an executable." && exit
        echo "$(realpath "$file")" >&3
        exit 100
        ;;
      "")
        # Invoke `Rooter` command to change to correct root directory.
        if [ -n "$lineno" ]; then
          cmd="vi +Rooter '$file' '+norm ${lineno}G'"
        else
          cmd="vi +Rooter '$file'"
        fi
        eval $cmd
        exit
        ;;
    esac
  fi
done
