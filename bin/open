#!/usr/bin/env bash

set -eo pipefail

export DOTFILES_DIR="${DOTFILES_DIR:-$(cd -- "$(dirname "$0")/.." &>/dev/null && pwd -P)}"

usage() {
  cat <<-EOF
Usage: open [uri]

OSX open likewise.

When running on OSX, it's just a wrapper.

When running on WSL, we uses cmd.exe to implement the same behavior.
The parameter can be a filesystem path. Also it can be an HTTP URL
which is inferred by 'https?://' prefix.

When no argument is passed, it opens the current working direcotry.

Options:
  -b use browser to open the specified uri
EOF
  exit 1
}

source "$DOTFILES_DIR/scripts/lib/cli.sh"

is_wsl() {
  [[ "$(uname -r)" =~ [Mm]icrosoft ]]
}

if ! is_wsl && [ "$#" -gt 0 -a "$1" = "-" ]; then
  shift
  exec open "$@"
fi

while [ "$#" -gt 0 ]; do
  case "$1" in
    -b)
      use_browser=1
      ;;
    -*)
      usage
      ;;
    *)
      uri="$1"
      ;;
  esac
  shift
done

has_http_prefix() {
  [[ "$1" =~ ^https?:// ]]
}

uri="${uri:-.}"

if [ "$use_browser" = "1" -a ! -f "$uri" ] && ! has_http_prefix "$uri"; then
  uri="http://$uri"
fi

if is_wsl; then
  source "$DOTFILES_DIR/scripts/lib/utils.sh"

  if [ "$use_browser" = "1" ] || has_http_prefix "$uri"; then
    cmd.exe /c start "$uri"
    exit
  fi
  if [ ! -e "$uri" ]; then
    abort "Directory or file '$uri' doesn't exist."
  fi

  cmd.exe /c "start explorer.exe $("$DOTFILES_DIR/bin/wslpath" -w "$uri")"
elif type -p open &>/dev/null; then
  if [ "$use_browser" = "1" ]; then
    open -a "Google Chrome" "$uri"
  else
    open "$uri"
  fi
elif type -p xdg-open &>/dev/null; then
  xdg-open "$uri"
else
  abort "Unsupported system"
fi
