#!/usr/bin/env bash

set -e

dotfiles_dir="$(realpath "$(dirname "$BASH_SOURCE")/..")"
templates_dir="$HOME/.templates"

usage() {
  cat <<-EOF
Usage: $0 [--no-editor] [-q <query>] [<template>]

Generate files from a template. When no template is given, it will use fzf to
let user select one.

Options:
  -q <query> fzf query string
  --no-editor do not open generated file with an editor
  --calling-path <path> by which file this command is called
  --print-output-path print the output path
  - delimit the start of the options for template generator, see gen function
EOF
  exit 1
}

gen() {
  local dst_dir="$(pwd)"
  local ask_filename=0
  local ask_filename_default
  local edit=0
  local executable=0
  local extname dst overwrite
  local use_sudo
  while [ "$#" -gt 0 ]; do
    case "$1" in
      # Target directory.
      -d | --target-dir)
        shift
        dst_dir="$1"
        ;;
      # Ask user to input the file name.
      -p | --ask-filename)
        ask_filename=1
        ;;
      # The default filename when asking.
      --ask-filename-default)
        shift
        ask_filename_default="$1"
        ;;
      # Open destination file with EDITOR.
      # Only available when template is not a directory.
      -e | --editor)
        if [ ! "$no_editor" = "1" ]; then
          edit=1
        fi
        ;;
      # Change to executable.
      # Only available when template is not a directory.
      -x | --exec)
        executable=1
        ;;
      # Only available when template is not a directory.
      --ext)
        shift
        extname="$1"
        if [ ! "${extname:0:1}" = "." ]; then
          extname=".$extname"
        fi
        ;;
      # Absolute path to the generated file.
      -f)
        shift
        dst="$1"
        ;;
      --overwrite)
        overwrite=1
        ;;
      --sudo)
        use_sudo="sudo"
        ;;
      # Any unknown argument will break the while loop. So the argument order matters.
      *)
        break
        ;;
    esac
    shift
  done

  local src_root="$templates_dir/src"
  local short_name="$1"
  local name="$src_root/$short_name"
  local filename
  if [ -d "$name" ]; then
    if [ -z "$dst" ]; then
      if [ "$ask_filename" = "1" ]; then
        source "$dotfiles_dir/scripts/lib/prompt.sh"
        while true; do
          ask_for_input filename "Directory name: " "$ask_filename_default"
          if [ -n "$filename" ]; then
            if [ -e "$dst_dir/$filename" ]; then
              echo "File '$dst_dir/$filename' already exists"
              unset filename
            else
              break
            fi
          fi
        done
      else
        filename="$1"
      fi
      dst="$dst_dir/$filename"
    fi
    local cmds=(cp -R "$name" "$dst")
    local src_parent_dir="$name/__parent__"
    if [ -e "$src_parent_dir" ]; then
      cmds+=("&&" "rm" -rf "$dst/__parent__")
      local dst_parent_dir="$(dirname "$dst")"
      local f
      while read f; do
        if [ -e "$dst_parent_dir/$f" ]; then
          echo "$dst_parent_dir/$f already exists. Abort"
          exit 1
        fi
        if [ -d "$src_parent_dir/$f" ]; then
          cmds+=("&&" "cp" -R "$src_parent_dir/$f" "$dst_parent_dir/$f")
        else
          cmds+=("&&" "cp" "$src_parent_dir/$f" "$dst_parent_dir/$f")
        fi
      done < <(ls -A "$src_parent_dir")
    fi
    eval "${cmds[@]}"
    echo "Generated successfully."
  else
    # We don't use regex because of the differences between linux based systems and BSD systems.
    local file="$(find "$src_root" -name "$short_name.tpl" -or -name "$short_name.tpl.sh" -or -name "$short_name.tpl.erb" | head -1)"
    if [ -z "$file" ]; then
      echo No template file found. To resolve this issue, you can try to update the templates repository.
      exit 1
    fi

    if [ -z "$dst" ]; then
      if [ "$ask_filename" = "1" ]; then
        source "$dotfiles_dir/scripts/lib/prompt.sh"
        while true; do
          ask_for_input filename "File name: $dst_dir/"
          if [ -n "$extname" ] && [[ ! "$filename" =~ "$extname"$ ]]; then
            filename="$filename$extname"
          fi
          if [ -n "$filename" ]; then
            if [ -e "$dst_dir/$filename" ]; then
              echo "File '$dst_dir/$filename' already exists"
              unset filename
            else
              break
            fi
          fi
        done
      else
        filename="$1"
      fi
      dst="$dst_dir/$filename"
    else
      filename="$(basename "$dst")"
    fi

    if [ -e "$dst" -a -z "$overwrite" ]; then
      local reply
      echo -n "File $dst already exists, overwrite it or generate a temporary file? (y/N/g)"
      read reply
      if [ "$reply" = "g" ]; then
        dst="$(mktemp)"
        filename="$(basename "$dst")"
      elif [ ! "$reply" = "y" ]; then
        echo Cancelled
        exit
      fi
    fi

    mkdir -p "$(dirname "$dst")"

    if [ "$file" = "$name.tpl" ]; then
      $use_sudo cp "$file" "$dst"
    else
      tmpfile="$(mktemp)"
      handle_exit() {
        if [ -e "$tmpfile" ]; then
          rm "$tmpfile"
        fi
      }
      trap handle_exit EXIT
      export FILENAME="$filename"
      case "$file" in
        $name.tpl.sh)
          eval "echo -e \"$(cat "$file")\"" >"$tmpfile"
          ;;
        $name.tpl.erb)
          erb -T - "$file" >"$tmpfile"
          ;;
      esac
      unset FILENAME
      $use_sudo cp "$tmpfile" "$dst"
    fi

    [ "$executable" = "1" ] && $use_sudo chmod a+x "$dst"

    if [ "$print_output_path" = "1" ]; then
      echo $dst
    else
      if [ "$edit" = "1" ]; then
        $use_sudo "${EDITOR:-vim}" "$dst"
      else
        echo "File $dst generated."
      fi
    fi
  fi
}

[ -e "$templates_dir/scripts/gen" ] || git clone https://github.com/uzxmx/templates "$templates_dir" --depth 1
source "$templates_dir/scripts/gen"

while [ "$#" -gt 0 ]; do
  case "$1" in
    -q)
      shift
      query="$1"
      ;;
    --no-editor)
      no_editor=1
      ;;
    --calling-path)
      shift
      calling_path="$1"
      ;;
    --print-output-path)
      print_output_path=1
      ;;
    -)
      shift
      break
      ;;
    *)
      if [ "$(type -t "gen_$1")" = "function" ]; then
        template="$1"
      else
        usage
      fi
      ;;
  esac
  shift
done

if [ -n "$template" ]; then
  "gen_$template" "$@"
  exit
fi

source "$dotfiles_dir/scripts/lib/cmd_fzf.sh"

cmd_fzf --query "$query"
