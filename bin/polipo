#!/usr/bin/env bash

set -eo pipefail

export DOTFILES_DIR="${DOTFILES_DIR:-$(cd -- "$(dirname "$0")/.." &>/dev/null && pwd -P)}"

source "$DOTFILES_DIR/scripts/lib/cli.sh"

usage() {
  cat <<-EOF
Wrapper for polipo utility.

This is a caching HTTP proxy, if you don't want the caching, you can switch to 'privoxy'.

Subcommands:
  status  - show the status of polipo
  log     - tail the polipo log
  start   - start polipo
  stop    - stop polipo
  restart - restart polipo
EOF
  exit 1
}

pid_file=$(polipo -v | grep 'pidFile ' | cut -d ' ' -f 3)
pid_file=${pid_file:-/tmp/polipo.pid}

get_pid() {
  cat "$pid_file" 2>/dev/null || true
}

polipo_is_running() {
  local pid=$(get_pid)
  if [ -n "$pid" ]; then
    ps "$pid" &>/dev/null
  else
    false
  fi
}

usage_start() {
  cat <<-EOF
Usage: polipo start

Start polipo.

Options:
  -b <address> the proxy address to bind to, default is '0.0.0.0'
  -p <port> the proxy port to listen at, default is 8123
  --socks <proxy> the parent socks proxy to forward the traffic, default is '127.0.0.1:1080'
  --pid <pid-file> the pid file, default is '/tmp/polipo.pid'
  --log <log-file> the log file, default is '/tmp/polipo.log'
  -D do not daemonise, this will make '/dev/stdout' as the log file
EOF
  exit 1
}

cmd_start() {
  local -a configs
  while [ "$#" -gt 0 ]; do
    case "$1" in
      -b)
        shift
        configs+=("proxyAddress=$1")
        ;;
      -p)
        shift
        configs+=("proxyPort=$1")
        ;;
      --socks)
        shift
        configs+=("socksParentProxy=$1")
        ;;
      --pid)
        shift
        configs+=("pidFile=$1")
        ;;
      --log)
        shift
        configs+=("logFile=$1")
        ;;
      -D)
        configs+=("daemonise=false" "logFile=/dev/stdout")
        ;;
      *)
        usage_start
        ;;
    esac
    shift
  done

  if ! polipo_is_running; then
    polipo -- "${configs[@]}"
  fi
}

cmd_stop() {
  if polipo_is_running; then
    kill -9 "$(get_pid)"
  fi
  rm -rf "$pid_file"
}

cmd_restart() {
  cmd_stop
  cmd_start
}

cmd_status() {
  if polipo_is_running; then
    echo 'Polipo is running'
  else
    echo 'Polipo is NOT running'
  fi
}

cmd_log() {
  if ! polipo_is_running; then
    echo 'Polipo is NOT running'
    exit
  fi

  local log_file=$(polipo -v | grep 'logFile ' | cut -d ' ' -f 3)
  if [ -z "$log_file" ]; then
    echo 'Cannot detect polipo log file'
  else
    tail -F "$log_file"
  fi
}

case "$1" in
  start | stop | restart | status | log)
    run "$@"
    ;;
  -h)
    usage
    ;;
  -)
    shift
    polipo "$@"
    ;;
  *)
    polipo "$@"
    ;;
esac
