#!/usr/bin/env python

import sys
import argparse
import html

class HTMLEscapeCommand:
    def __init__(self, subparsers):
        epilog = '''
Examples:
  $> html escape "&"
  $> html escape "<foo>"

  # Escape a file.
  $> html escape -f index.html
'''
        parser = subparsers.add_parser('escape', description='Escape HTML entity.', epilog=epilog, formatter_class=argparse.RawTextHelpFormatter)
        self.parser = parser
        parser.add_argument('-f', '--file', type=argparse.FileType('r'), help='A file to read')
        parser.add_argument('str', type=str, nargs='*', help='HTML entity to escape')
        parser.set_defaults(func=self.run)

    def run(self, args):
        if args.file:
            text = args.file.read()
            result = html.escape(text)
            print(result)
        elif args.str:
            for s in args.str:
                print(html.escape(s))
        else:
            self.parser.print_help()

class HTMLUnescapeCommand:
    def __init__(self, subparsers):
        epilog = '''
Examples:
  $> html unescape "&amp;"
  $> html unescape "&lt;foo&gt;" "Chinese text: &#36873;&#25321;"

  # Unescape a file.
  $> html unescape -f index.html
'''
        parser = subparsers.add_parser('unescape', description='Unescape HTML entity.', epilog=epilog, formatter_class=argparse.RawTextHelpFormatter)
        self.parser = parser
        parser.add_argument('-f', '--file', type=argparse.FileType('r'), help='A file to read')
        parser.add_argument('str', type=str, nargs='*', help='HTML entity to unescape')
        parser.set_defaults(func=self.run)

    def run(self, args):
        if args.file:
            text = args.file.read()
            result = html.unescape(text)
            print(result)
        elif args.str:
            for s in args.str:
                print(html.unescape(s))
        else:
            self.parser.print_help()

class HTMLCommand:
    def __init__(self):
        self.parser = argparse.ArgumentParser(prog='html', description='HTML utility.')
        subparsers = self.parser.add_subparsers(title='subcommands')
        HTMLEscapeCommand(subparsers)
        HTMLUnescapeCommand(subparsers)

    def run(self, args):
        parsed = self.parser.parse_args(args)
        if hasattr(parsed, 'func'):
            parsed.func(parsed)
        else:
            self.parser.print_help()

if __name__ == '__main__':
    HTMLCommand().run(sys.argv[1:])
