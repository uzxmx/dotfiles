#!/usr/bin/env python

import os
import argparse
import re
import sys
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.chrome.options import Options

class Main:
    @classmethod
    def run(cls, opts, chrome_options):
        options = Options()

        if opts.user_agent:
            options.add_argument(f'--user-agent={opts.user_agent}')

        if opts.proxy_server:
            options.add_argument(f'--proxy-server={opts.proxy_server}')

        if opts.user_data_dir:
            options.add_argument(f'--user-data-dir={opts.user_data_dir}')

        if opts.devtools:
            options.add_argument('--auto-open-devtools-for-tabs')
            prefs = {
                'devtools.preferences': {
                    'currentDockState': '"bottom"',
                    'panel-selectedTab': '"network"'
                }
            }
            options.add_experimental_option('prefs', prefs)

        options.add_experimental_option('excludeSwitches', ['enable-automation'])
        options.add_experimental_option('useAutomationExtension', False)

        if chrome_options and len(chrome_options) > 0:
            for e in chrome_options:
                options.add_argument(e)

        if opts.mobile_emulation:
            options.add_experimental_option('mobileEmulation', { 'deviceName': 'Galaxy S5' })

        if opts.maximize:
            options.add_argument('--start-maximized')

        if opts.uc:
            import undetected_chromedriver as uc
            driver = uc.Chrome(options=options)
        else:
            driver = webdriver.Chrome(options=options)

        try:
            if opts.url:
                page_url = opts.url if opts.url.startswith('http://') or opts.url.startswith('https://') else f'http://{opts.url}'
            else:
                page_url = 'chrome://newtab'
            driver.get(page_url)

            if opts.url and opts.cookie:
                domain_pattern = re.compile('^https?://([^/]+).*$')
                r = domain_pattern.match(page_url)
                domain = None
                if r:
                    domain = r.group(1)
                if not domain:
                    print('Cannot parse domain from url: {}'.format(page_url))
                    sys.exit(1)
                for c in opts.cookie.split(';'):
                   name, value = c.strip().split('=', 1)
                   driver.add_cookie({ 'name': name, 'value': value, 'domain': domain })

            if opts.interact:
                import code
                code.interact(local=locals())
            else:
                WebDriverWait(driver, timeout=(3600 * 24 * 365)).until(lambda d: False)

            driver.close()
        finally:
            # Close the session.
            driver.quit()

if __name__ == '__main__':
    epilog = '''
Note: Any unknown options will be passed as chrome arguments.

Examples:
  $> webdriver '--host-resolver-rules=MAP www.google.com 127.0.0.1' --ignore-certificate-errors
'''
    parser = argparse.ArgumentParser(epilog=epilog, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-u', '--url', help='The url of the page to open')
    parser.add_argument('-m', '--maximize', action='store_true', help='Maximize the window')
    parser.add_argument('--user-agent', help='The user agent')
    parser.add_argument('-p', '--proxy-server', help='The proxy server, e.g. [http://]127.0.0.1:8080, socks5://127.0.0.1:1080')
    parser.add_argument('-d', '--user-data-dir', help='The directory to save the session data')
    parser.add_argument('-c', '--cookie', help='The cookie to set for the domain specified by the page url')
    parser.add_argument('-i', '--interact', action='store_true', help='Interact with webdriver by opening a python console')
    parser.add_argument('--devtools', action='store_true', help='Automatically open devtools')
    parser.add_argument('--mobile-emulation', action='store_true', help='Enable mobile emulation')
    parser.add_argument('--uc', action='store_true', help='Use undetected_chromedriver to bypass Cloudflare')
    args, unknown_args = parser.parse_known_args()
    Main.run(args, unknown_args)
