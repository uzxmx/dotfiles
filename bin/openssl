#!/usr/bin/env bash

set -e

dotfiles_dir="$(realpath "$(dirname "$BASH_SOURCE")/..")"
openssl_dir="$dotfiles_dir/scripts/openssl"

usage() {
  cat <<-EOF
Wrapper for openssl utility. Use 'openssl help' to get the original help.

Subcommands:
  e, exp      - show expiration info of a cert (source can be a host, file or pipe)
  v, verify   - verify a host
  pubkey      - get public key for a cert (source can be a host, file or pipe)
  cert        - get certificate for a host, or its content
  chain       - get intermediate certificate for a host
  tlsversions - show supported tls versions of remote server
  ocsp_req    - send request to OCSP responder
  rm_pass     - remove passphrase from a private key
  g, gen      - generate private key, CA, certificate, etc.
  s, show     - show the content of a PEM file (cert, csr, privkey)
  rsa         - RSA key utilities
  p12         - PKCS#12 utilities
  m, match    - check if a key pair matches (also support cert)
EOF
  exit 1
}

source "$dotfiles_dir/scripts/lib/path.sh"
PATH="$(new_path_exclude "$dotfiles_dir/bin")"

alias_cmd() {
  local new_name="$1"
  local old_name="$2"
  eval "
    usage_$new_name() {
      usage_$old_name \"\$@\"
    }
    cmd_$new_name() {
      cmd_$old_name \"\$@\"
    }
  "
}

check_host() {
  [ -n "$1" ] || (echo 'Host is required' && exit 1)
}

show_expiration() {
  echo | openssl s_client -connect "$1:443" -servername "$1" 2>/dev/null | openssl x509 -noout -dates
}

run() {
  local cmd="$1"
  shift
  case "$1" in
    -h)
      type "usage_$cmd" &>/dev/null && "usage_$cmd"
      ;;
  esac
  "cmd_$cmd" "$@"
}

run_fallback() {
  if [ "$1" = "help" ]; then
    openssl "$@" 2>&1
  else
    openssl "$@"
  fi
}

case "$1" in
  e | exp | v | verify | pubkey | cert |\
  chain | tlsversions | ocsp_req | rm_pass |\
  g | gen | s | show | p12 | m | match)
    case "$1" in
      e)
        name="exp"
        ;;
      v)
        name="verify"
        ;;
      g)
        name="gen"
        ;;
      s)
        name="show"
        ;;
      m)
        name="match"
        ;;
      *)
        name="$1"
        ;;
    esac
    source "$openssl_dir/$name.sh"
    run "$@"
    ;;
  -h)
    usage
    ;;
  -)
    shift
    run_fallback "$@"
    ;;
  *)
    run_fallback "$@"
    ;;
esac
