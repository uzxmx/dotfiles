# Require at least tmux 3.0.
#
# https://github.com/tmux/tmux/blob/master/CHANGES#L487

#-------------------------------------------------------------------------------
# Basic options
#-------------------------------------------------------------------------------
# Stop tmux from launching login shells
# Ref: https://wiki.archlinux.org/index.php/tmux#Start_a_non-login_shell
if-shell -b 'type -p zsh &>/dev/null' {
  set-option -g default-command zsh # `$SHELL` doesn't work as expected in Ubuntu's terminal
} {
  set-option -g default-command bash
}
set-option -g default-terminal "screen-256color"
set-option -g mouse on
set-option -g allow-rename off
set-option -g renumber-windows on
set-option -g set-clipboard on
set-window-option -g mode-keys vi

set-option -ga update-environment ' DOTFILES_DIR DOTFILES_NON_INTRUSIVE_MODE DOTFILES_TARGET_DIR'

#-------------------------------------------------------------------------------
# Plugins
#-------------------------------------------------------------------------------
# These plugins are read and downloaded by $DOTFILES_DIR/scripts/install/tmux.
set-option -g @plugin 'tmux-plugins/tpm'
set-option -g @plugin 'tmux-plugins/tmux-sensible'
set-option -g @plugin 'christoomey/vim-tmux-navigator'
set-option -g @plugin 'tmux-plugins/tmux-resurrect'
set-option -g @plugin 'tmux-plugins/tmux-continuum'
set-option -g @resurrect-capture-pane-contents 'on'

#-------------------------------------------------------------------------------
# Message bar
#-------------------------------------------------------------------------------
set-option -g display-time 2000
set-option -g display-panes-time 2000

#-------------------------------------------------------------------------------
# Status line
#-------------------------------------------------------------------------------
set-option -g status on
set-option -g status-style "bg=colour233"
set-option -g status-interval 5

if-shell -b '[ -n "$SSH_CONNECTION" -o -n "$SSH_TTY" -o -n "$SSH_CLIENT" ]' {
  set-option -g status-left '#[fg=blue][#S][SSH]'
} {
  set-option -g status-left '#[fg=blue][#S]'
}
set-option -g status-left-length 25

set-option -g status-right "#[fg=blue][#(battery_status)]"
set-option -ag status-right "#[fg=blue][#(uptime | sed 's/.*up//' | sed 's/,.*//' | sed 's/^ *//') â†‘]"
set-option -ag status-right "#[fg=blue][%Y-%m-%d %H:%M:%S %z]"
set-option -ag status-right "#[fg=blue][#($DOTFILES_DIR/scripts/misc/tmux_status_ip)]"
set-option -g status-right-length 95

set-option -g window-status-style "fg=colour250"
set-option -g window-status-format ' #I:#W#F '
set-option -g window-status-separator '|'
set-option -g window-status-current-style "bg=cyan,fg=black"
set-option -g window-status-current-format ' #I:#W#F '

# Export environment variable TMUX_VERSION
run-shell 'tmux set-environment -g TMUX_VERSION $(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

bind-key r source-file $DOTFILES_TARGET_DIR/.config/tmux/tmux.conf \; display-message 'source-file done'

bind-key % split-window -h -c '#{pane_current_path}'
bind-key v split-window -h -c '#{pane_current_path}'
bind-key '"' split-window -v -c '#{pane_current_path}'
bind-key s split-window -v -c '#{pane_current_path}'
bind-key c new-window -c '#{pane_current_path}'
bind-key -r H swap-window -d -t -1 # Move window left
bind-key -r L swap-window -d -t +1 # Move window right

bind-key -r > resize-pane -R 10
bind-key -r < resize-pane -L 10
bind-key -r + resize-pane -U 10
bind-key -r - resize-pane -D 10

# Toggle pane title visibility
# Ref: https://github.com/tmux/tmux/issues/680#issuecomment-326652202
bind-key T run-shell 'zsh -c "arr=( off top ) && tmux setw pane-border-status \${arr[\$(( \${arr[(I)#{pane-border-status}]} % 2 + 1 ))]}"'

bind-key / command-prompt -p "man" "new-window 'exec man %%'"
bind-key e command-prompt -p "zsh -ic" "new-window 'zsh -ic %%'"
# Window should be prefixed with `:`. (https://github.com/tmux/tmux/issues/1256)
bind-key j command-prompt -p "move panel to window" "join-pane -t :%%"

bind-key P paste-buffer

# Restoring clear screen (C-l)
# https://github.com/christoomey/vim-tmux-navigator#restoring-clear-screen-key-binding
bind-key C-l send-keys 'C-l'

# The binding for `C-u` is just a workaround. When we press `V` to select line, the original
# `C-u` will cause the end side to move to the beginning of that line and we lose some
# selected text.
#
# https://github.com/tmux/tmux/issues/754#issuecomment-303156000
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-u send-keys -X cursor-up \; send-keys -X halfpage-up
bind-key -T copy-mode-vi z send-keys -X end-of-line \; send-keys -X cursor-left

if-shell -b '[ -n "$SSH_CONNECTION" -o -n "$SSH_TTY" -o -n "$SSH_CLIENT" ]' {
  bind-key -T copy-mode-vi y send-keys -X copy-pipe osc52
  bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel osc52
  bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe osc52
} {
  if-shell -b 'uname -r | grep "Microsoft$"' {
    bind-key -T copy-mode-vi y send-keys -X copy-pipe "/mnt/c/Windows/System32/clip.exe"
    bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "/mnt/c/Windows/System32/clip.exe"
    bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "/mnt/c/Windows/System32/clip.exe"
  } {
    if-shell -b '[ "$(uname -s)" = "Linux" ] && which xclip' {
      bind-key -T copy-mode-vi y send-keys -X copy-pipe "xclip -in -selection clipboard"
      bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
      bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -in -selection clipboard"
    } {
      bind-key -T copy-mode-vi y send-keys -X copy-selection
      bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection
    }
  }
}

set-hook -g session-created 'run-shell "$DOTFILES_DIR/init/init.sh"'
set-hook -g client-attached 'run-shell "$DOTFILES_DIR/init/init.sh"'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run "$DOTFILES_TARGET_DIR/.config/tmux/plugins/tpm/tpm"
